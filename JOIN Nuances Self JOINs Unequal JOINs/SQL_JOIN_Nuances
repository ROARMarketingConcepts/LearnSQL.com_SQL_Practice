-- Display the menu item name along with the number of times it was sold as sales_count. 
-- Note that some menu items are new and may not have been sold yet. In that case, display 0 
-- ather than omit such menu items. Sort the results by sales_count in descending order.

-- Use a LEFT JOIN to include menu items that have not been sold yet.

-- Remember COUNT(*) and COUNT(column_name) behave differently. COUNT(*) counts all rows, 
-- while COUNT(column_name) counts only the rows where column_name is not NULL. In our case, 
-- if we use COUNT(*), the sales_count for menu items not yet sold will be 1 instead of 0! 
-- To get the correct result, use COUNT(purchase_menu_item.menu_item_id) instead.


SELECT mi.name, count(pmi.menu_item_id) AS sales_count
FROM menu_item mi
LEFT JOIN purchase_menu_item pmi
ON mi.id=pmi.menu_item_id
GROUP BY mi.name
ORDER BY sales_count DESC


-- For each month of 2023, calculate the total revenue and the revenue for 
-- each of the 'baked goods' and 'drinks' categories. Show the following columns: 
-- revenue_month, total_revenue, baked_goods_revenue, and drinks_revenue. Order the 
-- results by month.

SELECT DISTINCT EXTRACT(MONTH FROM purchase_date) AS revenue_month,
SUM(price) AS total_revenue,
SUM(CASE WHEN category='baked goods' THEN price ELSE 0 END) AS baked_goods_revenue,
SUM(CASE WHEN category = 'drinks' THEN price ELSE 0 END) AS drinks_revenue
FROM purchase p
LEFT JOIN purchase_menu_item pmi
	ON pmi.purchase_id=p.id
LEFT JOIN menu_item mi
	ON mi.id=pmi.menu_item_id
WHERE purchase_date > '2022-12-31'
GROUP BY EXTRACT(MONTH FROM purchase_date)


-- Show the speaker's name and the count of non-native languages spoken by each speaker 
-- (call this column language_count). Some speakers may not yet be assigned to any language; 
-- display 0 instead of omitting that speaker. Sort the results by the number of languages in 
-- descending order.

-- Use a LEFT JOIN to include speakers who have not yet chosen any non-native language. Remember 
-- that COUNT(*) and COUNT(column_name) behave differently. COUNT(*) counts all rows, whereas 
-- COUNT(column_name) counts only the rows in which the given column is not null. If we use COUNT(*) 
-- in our case, the number of languages shown for speakers with no non-native languages will be 1 rather than 0! 
-- To get the correct result, use COUNT(language_id) instead.

SELECT s.name,COUNT(ls.language_id) AS language_count
FROM speaker s
LEFT JOIN language_speaker ls
ON s.id=ls.speaker_id AND native='f'
GROUP BY 1
ORDER BY 2 DESC

-- Display the speaker's name and the count of chatrooms in which the speaker participates. 
-- Only count the chatrooms that have been active, defined by the last message sent in 2020 or later. 
-- Call this column chatroom_count. Sort the results by chatroom_count in descending order.

SELECT s.name, COUNT(c.id) AS chatroom_count
FROM speaker s
LEFT JOIN chatroom_speaker cs
ON cs.speaker_id=s.id 
LEFT JOIN chatroom c
ON c.id=cs.chatroom_id 
AND EXTRACT(year FROM last_active_at) >=2020  -- look at null rows in c.id that are generated
GROUP BY 1
ORDER BY 2 DESC

-- Display the speaker ID, the speaker's name, and the average lifetime of chatrooms for each speaker 
-- (avg_lifetime). The lifetime of a chatroom is the time between its creation and the last time when 
-- it was actively used (i.e., a message was sent by one of the users). If the average lifetime is NULL, 
-- we would like to display "0 days". Sort the results by the average lifetime in descending order.

SELECT s.id,s.name, AVG(COALESCE(last_active_at-created_at,'0 days')) AS avg_lifetime
FROM speaker s
LEFT JOIN chatroom_speaker cs
ON cs.speaker_id=s.id 
LEFT JOIN chatroom c
ON c.id=cs.chatroom_id 
GROUP BY 1,2
ORDER BY avg_lifetime DESC

----------------------------------------------------------------------------------------------------

WITH speakers_languages_table AS

(SELECT *
FROM speaker s
LEFT JOIN language_speaker ls
ON s.id=ls.speaker_id)

studying_speakers AS 

(SELECT s.id,s.name AS speaker2,l.id AS studying_language_id,l.name
FROM speaker s
LEFT JOIN language_speaker ls
ON s.id=ls.speaker_id
LEFT JOIN language l
ON ls.language_id=l.id
WHERE native='f')

SELECT speaker1, speaker2
FROM native_speakers ns
INNER JOIN studying_speakers ss
ON ns.native_language_id=ss.studying_language_id

-- There is one more caveat when using LEFT JOIN and its friends. There is a subtle 
-- difference between the conditions in the ON and WHERE clauses for these JOINs. The 
-- ON condition is evaluated when the tables are joined. The WHERE condition is applied 
-- after the rows have been joined. 

-- Show the title of each book and the name of its author 
-- â€” but only if the author was born in the 20th century.

-- Otherwise, the author's name field should be NULL.

SELECT b.title,a.name
FROM book b
LEFT JOIN author a
ON b.author_id=a.id
AND a.birth_year BETWEEN 1901 AND 2000



